{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "factoryName": {
            "type": "string",
            "metadata": "データ ファクトリ名",
            "defaultValue": "omni-df-dev"
        }
    },
    "variables": {
        "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
    },
    "resources": [
        {
            "name": "[concat(parameters('factoryName'), '/DoUntilPipeline_copy1')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Until1",
                        "type": "Until",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@or(greater(variables('countRecords'),0),greater(variables('countLoop'),5))",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "Lookup1",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlDWSource",
                                            "sqlReaderQuery": {
                                                "value": "SELECT\n    COUNT(*) as count0\nFROM [omni].[omni_odｍ_mytginfo_trn_mtgmst_under_contract_flagx]    -->>[omni_odｍ_mytginfo_trn_mtgmaster_under_contract_flag] -- mTG会員_契約中フラグ\nWHERE REC_REG_YMD=format(CONVERT(DATE, GETDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'Tokyo Standard Time'),'yyyyMMdd')\n;\n",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_DamDwhTable",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "table": "omni_odｍ_mytginfo_trn_mtgmst_under_contract_flagx"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "set_countRecords",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Lookup1",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "countRecords",
                                        "value": {
                                            "value": "@activity('Lookup1').output.firstRow.count0",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "set_countLoop",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "increment_countLoop",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "countLoop",
                                        "value": {
                                            "value": "@variables('temp')",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "increment_countLoop",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "set_countRecords",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "temp",
                                        "value": {
                                            "value": "@add(variables('countLoop'), 1)",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ],
                            "timeout": "0.12:00:00"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "variables": {
                    "countRecords": {
                        "type": "Integer",
                        "defaultValue": 0
                    },
                    "countLoop": {
                        "type": "Integer",
                        "defaultValue": 0
                    },
                    "temp": {
                        "type": "Integer",
                        "defaultValue": 0
                    }
                },
                "folder": {
                    "name": "IT"
                },
                "annotations": [],
                "lastPublishTime": "2025-02-12T08:19:47Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/df_json_data')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "ds_contract_score",
                                "type": "DatasetReference"
                            },
                            "name": "dataimport",
                            "description": "ds_contract_scoreからデータをインポートします"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ds_KarteS3",
                                "type": "DatasetReference"
                            },
                            "name": "dataexportkarte"
                        },
                        {
                            "dataset": {
                                "referenceName": "ds_Json_Blob",
                                "type": "DatasetReference"
                            },
                            "name": "dataexportblob"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "contractscoreColumn",
                            "description": "TG契約情報をJSON形式に変換しています"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     filename as string (\"test.json\")",
                        "}",
                        "source(output(",
                        "          HASHED_MTGID as string,",
                        "          INTERNAL_AREA_GAS as string,",
                        "          INTERNAL_AREA_GAS_MENU as string,",
                        "          EXTERNAL_AREA_GAS as string,",
                        "          EXTERNAL_AREA_GAS_MENU as string,",
                        "          POWER as string,",
                        "          POWER_MENU as string,",
                        "          PV_SITI_SCR as decimal(6,5),",
                        "          DG_STN_AGE_0_29 as decimal(5,2),",
                        "          DG_STN_AGE_30_39 as decimal(5,2),",
                        "          DG_STN_AGE_40_49 as decimal(5,2),",
                        "          DG_STN_AGE_50_59 as decimal(5,2),",
                        "          DG_STN_AGE_60_69 as decimal(5,2),",
                        "          DG_STN_AGE_70_99 as decimal(5,2),",
                        "          DG_STNS_4MLON_LESS as decimal(5,2),",
                        "          DG_STNS_10MLON_OVER as decimal(5,2),",
                        "          TNKYSK_1YEAR as decimal(5,2),",
                        "          SYZI_GS_DTRKSCR_MONTH03 as decimal(5,2),",
                        "          SYZI_GS_DTRKSCR_YEAR01 as decimal(5,2),",
                        "          SYZI_DK_DTRKSCR_MONTH03 as decimal(5,2),",
                        "          SYZI_DK_DTRKSCR_YEAR01 as decimal(5,2),",
                        "          SYZI_SGSTB_TBLKNR as decimal(5,2),",
                        "          SYZI_SGSTB_BLTINKNR as decimal(5,2),",
                        "          SYZI_SGSTB_TES as decimal(5,2),",
                        "          SYZI_SGSTB_HRK as decimal(5,2),",
                        "          SYZI_SGSTB_OY as decimal(5,2),",
                        "          SYZI_SGSTB_FNHT as decimal(5,2),",
                        "          SYZI_SGSTB_GSKNSK as decimal(5,2),",
                        "          SYZI_SV_GSKK_SS as decimal(5,2),",
                        "          SYZI_DK_WEB as decimal(5,2)",
                        "     ),",
                        "     allowSchemaDrift: false,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table',",
                        "     staged: false) ~> dataimport",
                        "dataimport derive(user_id = HASHED_MTGID,",
                        "          contract = @(internal_area_gas=toBoolean(INTERNAL_AREA_GAS),",
                        "          internal_area_gas_menu=INTERNAL_AREA_GAS_MENU,",
                        "          external_area_gas=toBoolean(EXTERNAL_AREA_GAS),",
                        "          external_area_gas_menu=EXTERNAL_AREA_GAS_MENU,",
                        "          power=toBoolean(POWER),",
                        "          power_menu=POWER_MENU),",
                        "          score = @(pv_siti_scr=PV_SITI_SCR,",
                        "          dg_stn_age_0_29=DG_STN_AGE_0_29,",
                        "          dg_stn_age_30_39=DG_STN_AGE_30_39,",
                        "          dg_stn_age_40_49=DG_STN_AGE_40_49,",
                        "          dg_stn_age_50_59=DG_STN_AGE_50_59,",
                        "          dg_stn_age_60_69=DG_STN_AGE_60_69,",
                        "          dg_stn_age_70_99=DG_STN_AGE_70_99,",
                        "          dg_stns_4mlon_less=DG_STNS_4MLON_LESS,",
                        "          dg_stns_10mlon_over=DG_STNS_10MLON_OVER,",
                        "          tnkysk_1year=TNKYSK_1YEAR,",
                        "          syzi_gs_dtrkscr_month03=SYZI_GS_DTRKSCR_MONTH03,",
                        "          syzi_gs_dtrkscr_year01=SYZI_GS_DTRKSCR_YEAR01,",
                        "          syzi_dk_dtrkscr_month03=SYZI_DK_DTRKSCR_MONTH03,",
                        "          syzi_dk_dtrkscr_year01=SYZI_DK_DTRKSCR_YEAR01,",
                        "          syzi_sgstb_tblknr=SYZI_SGSTB_TBLKNR,",
                        "          syzi_sgstb_bltinknr=SYZI_SGSTB_BLTINKNR,",
                        "          syzi_sgstb_tes=SYZI_SGSTB_TES,",
                        "          syzi_sgstb_hrk=SYZI_SGSTB_HRK,",
                        "          syzi_sgstb_oy=SYZI_SGSTB_OY,",
                        "          syzi_sgstb_fnht=SYZI_SGSTB_FNHT,",
                        "          syzi_sgstb_gsknsk=SYZI_SGSTB_GSKNSK,",
                        "          syzi_sv_gskk_ss=SYZI_SV_GSKK_SS,",
                        "          syzi_dk_web=SYZI_DK_WEB)) ~> contractscoreColumn",
                        "contractscoreColumn sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     partitionFileNames:[($filename)],",
                        "     mapColumn(",
                        "          user_id,",
                        "          contract,",
                        "          score",
                        "     ),",
                        "     partitionBy('hash', 1)) ~> dataexportkarte",
                        "contractscoreColumn sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     partitionFileNames:['$filename'],",
                        "     mapColumn(",
                        "          user_id,",
                        "          contract,",
                        "          score",
                        "     ),",
                        "     partitionBy('hash', 1)) ~> dataexportblob"
                    ]
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/df_json_data_blob_only')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "ds_contract_score",
                                "type": "DatasetReference"
                            },
                            "name": "dataimport",
                            "description": "ds_contract_scoreからデータをインポートする"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ds_Json_Blob",
                                "type": "DatasetReference"
                            },
                            "name": "dataexportblob",
                            "description": "データを ds_Json_Blob にエクスポートする"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "contractscoreColumn",
                            "description": "TG契約情報をJSON形式に変換する"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     filename as string",
                        "}",
                        "source(output(",
                        "          HASHED_MTGID as string,",
                        "          INTERNAL_AREA_GAS as string,",
                        "          INTERNAL_AREA_GAS_MENU as string,",
                        "          EXTERNAL_AREA_GAS as string,",
                        "          EXTERNAL_AREA_GAS_MENU as string,",
                        "          POWER as string,",
                        "          POWER_MENU as string,",
                        "          PV_SCORE_POWER as decimal(6,5),",
                        "          PV_SCORE_RANK_POWER as string,",
                        "          PV_SCORE_GAS as decimal(6,5),",
                        "          ESTIMATED_PV_HOLDINGS_FLAG_GAS as decimal(3,0),",
                        "          DG_STN_AGE_0_29 as decimal(5,2),",
                        "          DG_STN_AGE_30_39 as decimal(5,2),",
                        "          DG_STN_AGE_40_49 as decimal(5,2),",
                        "          DG_STN_AGE_50_59 as decimal(5,2),",
                        "          DG_STN_AGE_60_69 as decimal(5,2),",
                        "          DG_STN_AGE_70_99 as decimal(5,2),",
                        "          DG_SITI_ST_NUM as string,",
                        "          DG_STNS_4MLON_LESS as decimal(5,2),",
                        "          DG_STNS_10MLON_OVER as decimal(5,2),",
                        "          TNKYSK_2MONTH as decimal(5,2),",
                        "          TNKYSK_1YEAR as decimal(5,2),",
                        "          SYZI_GS_DTRKSCR_MONTH03 as decimal(5,2),",
                        "          SYZI_GS_DTRKSCR_YEAR01 as decimal(5,2),",
                        "          SYZI_DK_DTRKSCR_MONTH03 as decimal(5,2),",
                        "          SYZI_DK_DTRKSCR_YEAR01 as decimal(5,2),",
                        "          SYZI_SGSTB_TBLKNR as decimal(5,2),",
                        "          SYZI_SGSTB_BLTINKNR as decimal(5,2),",
                        "          SYZI_SGSTB_TES as decimal(5,2),",
                        "          SYZI_SGSTB_HRK as decimal(5,2),",
                        "          SYZI_SGSTB_OY as decimal(5,2),",
                        "          SYZI_SGSTB_FNHT as decimal(5,2),",
                        "          SYZI_SGSTB_GSKNSK as decimal(5,2),",
                        "          SYZI_SV_GSKK_SS as decimal(5,2),",
                        "          SYZI_DK_WEB as decimal(5,2)",
                        "     ),",
                        "     allowSchemaDrift: false,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table',",
                        "     staged: false) ~> dataimport",
                        "dataimport derive(user_id = HASHED_MTGID,",
                        "          contract = @(internal_area_gas=iif(isNull(INTERNAL_AREA_GAS),'Null',toString(toBoolean(INTERNAL_AREA_GAS))),",
                        "          internal_area_gas_menu=iif(isNull(INTERNAL_AREA_GAS_MENU),'Null',toString(INTERNAL_AREA_GAS_MENU)),",
                        "          external_area_gas=iif(isNull(EXTERNAL_AREA_GAS),'Null',toString(toBoolean(EXTERNAL_AREA_GAS))),",
                        "          external_area_gas_menu=iif(isNull(EXTERNAL_AREA_GAS_MENU),'Null',toString(EXTERNAL_AREA_GAS_MENU)),",
                        "          power=iif(isNull(POWER),'Null',toString(toBoolean(POWER))),",
                        "          power_menu=iif(isNull(POWER_MENU),'Null',toString(POWER_MENU))),",
                        "          score = @(pv_score_power=iif(isNull(PV_SCORE_POWER),'Null',toString(PV_SCORE_POWER,'0.00000')),",
                        "          pv_score_rank_power=iif(isNull(PV_SCORE_RANK_POWER),'Null',toString(PV_SCORE_RANK_POWER)),",
                        "          pv_score_gas=iif(isNull(PV_SCORE_GAS),'Null',toString(PV_SCORE_GAS,'0.00000')),",
                        "          estimated_pv_holdings_flag_gas=iif(isNull(ESTIMATED_PV_HOLDINGS_FLAG_GAS),'Null',toString(ESTIMATED_PV_HOLDINGS_FLAG_GAS)),",
                        "          dg_stn_age_0_29=iif(isNull(DG_STN_AGE_0_29),'Null',toString(DG_STN_AGE_0_29)),",
                        "          dg_stn_age_30_39=iif(isNull(DG_STN_AGE_30_39),'Null',toString(DG_STN_AGE_30_39)),",
                        "          dg_stn_age_40_49=iif(isNull(DG_STN_AGE_40_49),'Null',toString(DG_STN_AGE_40_49)),",
                        "          dg_stn_age_50_59=iif(isNull(DG_STN_AGE_50_59),'Null',toString(DG_STN_AGE_50_59)),",
                        "          dg_stn_age_60_69=iif(isNull(DG_STN_AGE_60_69),'Null',toString(DG_STN_AGE_60_69)),",
                        "          dg_stn_age_70_99=iif(isNull(DG_STN_AGE_70_99),'Null',toString(DG_STN_AGE_70_99)),",
                        "          dg_siti_st_num=iif(isNull(DG_SITI_ST_NUM),'Null',toString(DG_SITI_ST_NUM)),",
                        "          dg_stns_4mlon_less=iif(isNull(DG_STNS_4MLON_LESS),'Null',toString(DG_STNS_4MLON_LESS)),",
                        "          dg_stns_10mlon_over=iif(isNull(DG_STNS_10MLON_OVER),'Null',toString(DG_STNS_10MLON_OVER)),",
                        "          tnkysk_2month=iif(isNull(TNKYSK_2MONTH),'Null',toString(TNKYSK_2MONTH)),",
                        "          tnkysk_1year=iif(isNull(TNKYSK_1YEAR),'Null',toString(TNKYSK_1YEAR)),",
                        "          syzi_gs_dtrkscr_month03=iif(isNull(SYZI_GS_DTRKSCR_MONTH03),'Null',toString(SYZI_GS_DTRKSCR_MONTH03)),",
                        "          syzi_gs_dtrkscr_year01=iif(isNull(SYZI_GS_DTRKSCR_YEAR01),'Null',toString(SYZI_GS_DTRKSCR_YEAR01)),",
                        "          syzi_dk_dtrkscr_month03=iif(isNull(SYZI_DK_DTRKSCR_MONTH03),'Null',toString(SYZI_DK_DTRKSCR_MONTH03)),",
                        "          syzi_dk_dtrkscr_year01=iif(isNull(SYZI_DK_DTRKSCR_YEAR01),'Null',toString(SYZI_DK_DTRKSCR_YEAR01)),",
                        "          syzi_sgstb_tblknr=iif(isNull(SYZI_SGSTB_TBLKNR),'Null',toString(SYZI_SGSTB_TBLKNR)),",
                        "          syzi_sgstb_bltinknr=iif(isNull(SYZI_SGSTB_BLTINKNR),'Null',toString(SYZI_SGSTB_BLTINKNR)),",
                        "          syzi_sgstb_tes=iif(isNull(SYZI_SGSTB_TES),'Null',toString(SYZI_SGSTB_TES)),",
                        "          syzi_sgstb_hrk=iif(isNull(SYZI_SGSTB_HRK),'Null',toString(SYZI_SGSTB_HRK)),",
                        "          syzi_sgstb_oy=iif(isNull(SYZI_SGSTB_OY),'Null',toString(SYZI_SGSTB_OY)),",
                        "          syzi_sgstb_fnht=iif(isNull(SYZI_SGSTB_FNHT),'Null',toString(SYZI_SGSTB_FNHT)),",
                        "          syzi_sgstb_gsknsk=iif(isNull(SYZI_SGSTB_GSKNSK),'Null',toString(SYZI_SGSTB_GSKNSK)),",
                        "          syzi_sv_gskk_ss=iif(isNull(SYZI_SV_GSKK_SS),'Null',toString(SYZI_SV_GSKK_SS)),",
                        "          syzi_dk_web=iif(isNull(SYZI_DK_WEB),'Null',toString(SYZI_DK_WEB)))) ~> contractscoreColumn",
                        "contractscoreColumn sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     partitionFileNames:[($filename)],",
                        "     mapColumn(",
                        "          user_id,",
                        "          contract,",
                        "          score",
                        "     ),",
                        "     partitionBy('hash', 1)) ~> dataexportblob"
                    ]
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/df_json_data_blob_only_test')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "ds_contract_score",
                                "type": "DatasetReference"
                            },
                            "name": "dataimport",
                            "description": "ds_contract_scoreからデータをインポートする"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ds_Json_Blob_test",
                                "type": "DatasetReference"
                            },
                            "name": "dataexportblob",
                            "description": "データを ds_Json_Blob にエクスポートする"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "contractscoreColumn",
                            "description": "TG契約情報をJSON形式に変換する"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     filename as string",
                        "}",
                        "source(output(",
                        "          HASHED_MTGID as string,",
                        "          INTERNAL_AREA_GAS as string,",
                        "          INTERNAL_AREA_GAS_MENU as string,",
                        "          EXTERNAL_AREA_GAS as string,",
                        "          EXTERNAL_AREA_GAS_MENU as string,",
                        "          POWER as string,",
                        "          POWER_MENU as string,",
                        "          PV_SCORE_POWER as decimal(10,9),",
                        "          PV_SCORE_RANK_POWER as string,",
                        "          PV_SCORE_GAS as decimal(10,9),",
                        "          ESTIMATED_PV_HOLDINGS_FLAG_GAS as integer,",
                        "          DG_STN_AGE_0_29 as decimal(5,2),",
                        "          DG_STN_AGE_30_39 as decimal(5,2),",
                        "          DG_STN_AGE_40_49 as decimal(5,2),",
                        "          DG_STN_AGE_50_59 as decimal(5,2),",
                        "          DG_STN_AGE_60_69 as decimal(5,2),",
                        "          DG_STN_AGE_70_99 as decimal(5,2),",
                        "          DG_SITI_ST_NUM as string,",
                        "          DG_STNS_4MLON_LESS as decimal(5,2),",
                        "          DG_STNS_10MLON_OVER as decimal(5,2),",
                        "          TNKYSK_2MONTH as decimal(5,2),",
                        "          TNKYSK_1YEAR as decimal(5,2),",
                        "          SYZI_GS_DTRKSCR_MONTH03 as decimal(5,2),",
                        "          SYZI_GS_DTRKSCR_YEAR01 as decimal(5,2),",
                        "          SYZI_DK_DTRKSCR_MONTH03 as decimal(5,2),",
                        "          SYZI_DK_DTRKSCR_YEAR01 as decimal(5,2),",
                        "          SYZI_SGSTB_TBLKNR as decimal(5,2),",
                        "          SYZI_SGSTB_BLTINKNR as decimal(5,2),",
                        "          SYZI_SGSTB_TES as decimal(5,2),",
                        "          SYZI_SGSTB_HRK as decimal(5,2),",
                        "          SYZI_SGSTB_OY as decimal(5,2),",
                        "          SYZI_SGSTB_FNHT as decimal(5,2),",
                        "          SYZI_SGSTB_GSKNSK as decimal(5,2),",
                        "          SYZI_SV_GSKK_SS as decimal(5,2),",
                        "          SYZI_DK_WEB as decimal(5,2)",
                        "     ),",
                        "     allowSchemaDrift: false,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table',",
                        "     staged: false) ~> dataimport",
                        "dataimport derive(user_id = HASHED_MTGID,",
                        "          contract = @(internal_area_gas=iif(isNull(INTERNAL_AREA_GAS),'Null',toString(toBoolean(INTERNAL_AREA_GAS))),",
                        "          internal_area_gas_menu=iif(isNull(INTERNAL_AREA_GAS_MENU),'Null',toString(INTERNAL_AREA_GAS_MENU)),",
                        "          external_area_gas=iif(isNull(EXTERNAL_AREA_GAS),'Null',toString(toBoolean(EXTERNAL_AREA_GAS))),",
                        "          external_area_gas_menu=iif(isNull(EXTERNAL_AREA_GAS_MENU),'Null',toString(EXTERNAL_AREA_GAS_MENU)),",
                        "          power=iif(isNull(POWER),'Null',toString(toBoolean(POWER))),",
                        "          power_menu=iif(isNull(POWER_MENU),'Null',toString(POWER_MENU))),",
                        "          score = @(pv_siti_scr=iif(isNull(PV_SCORE_POWER),'Null',toString(PV_SCORE_POWER)),",
                        "          PV_SCORE_RANK_POWER=iif(isNull(PV_SCORE_RANK_POWER),'Null',toString(PV_SCORE_RANK_POWER)),",
                        "          PV_SCORE_GAS=iif(isNull(PV_SCORE_GAS),'Null',toString(PV_SCORE_GAS)),",
                        "          ESTIMATED_PV_HOLDINGS_FLAG_GAS=iif(isNull(ESTIMATED_PV_HOLDINGS_FLAG_GAS),'Null',toString(ESTIMATED_PV_HOLDINGS_FLAG_GAS)),",
                        "          dg_stn_age_0_29=iif(isNull(DG_STN_AGE_0_29),'Null',toString(DG_STN_AGE_0_29)),",
                        "          dg_stn_age_30_39=iif(isNull(DG_STN_AGE_30_39),'Null',toString(DG_STN_AGE_30_39)),",
                        "          dg_stn_age_40_49=iif(isNull(DG_STN_AGE_40_49),'Null',toString(DG_STN_AGE_40_49)),",
                        "          dg_stn_age_50_59=iif(isNull(DG_STN_AGE_50_59),'Null',toString(DG_STN_AGE_50_59)),",
                        "          dg_stn_age_60_69=iif(isNull(DG_STN_AGE_60_69),'Null',toString(DG_STN_AGE_60_69)),",
                        "          dg_stn_age_70_99=iif(isNull(DG_STN_AGE_70_99),'Null',toString(DG_STN_AGE_70_99)),",
                        "          DG_SITI_ST_NUM=iif(isNull(DG_SITI_ST_NUM),'Null',toString(DG_SITI_ST_NUM)),",
                        "          dg_stns_4mlon_less=iif(isNull(DG_STNS_4MLON_LESS),'Null',toString(DG_STNS_4MLON_LESS)),",
                        "          dg_stns_10mlon_over=iif(isNull(DG_STNS_10MLON_OVER),'Null',toString(DG_STNS_10MLON_OVER)),",
                        "          TNKYSK_2MONTH=iif(isNull(TNKYSK_2MONTH),'Null',toString(TNKYSK_2MONTH)),",
                        "          tnkysk_1year=iif(isNull(TNKYSK_1YEAR),'Null',toString(TNKYSK_1YEAR)),",
                        "          syzi_gs_dtrkscr_month03=iif(isNull(SYZI_GS_DTRKSCR_MONTH03),'Null',toString(SYZI_GS_DTRKSCR_MONTH03)),",
                        "          syzi_gs_dtrkscr_year01=iif(isNull(SYZI_GS_DTRKSCR_YEAR01),'Null',toString(SYZI_GS_DTRKSCR_YEAR01)),",
                        "          syzi_dk_dtrkscr_month03=iif(isNull(SYZI_DK_DTRKSCR_MONTH03),'Null',toString(SYZI_DK_DTRKSCR_MONTH03)),",
                        "          syzi_dk_dtrkscr_year01=iif(isNull(SYZI_DK_DTRKSCR_YEAR01),'Null',toString(SYZI_DK_DTRKSCR_YEAR01)),",
                        "          syzi_sgstb_tblknr=iif(isNull(SYZI_SGSTB_TBLKNR),'Null',toString(SYZI_SGSTB_TBLKNR)),",
                        "          syzi_sgstb_bltinknr=iif(isNull(SYZI_SGSTB_BLTINKNR),'Null',toString(SYZI_SGSTB_BLTINKNR)),",
                        "          syzi_sgstb_tes=iif(isNull(SYZI_SGSTB_TES),'Null',toString(SYZI_SGSTB_TES)),",
                        "          syzi_sgstb_hrk=iif(isNull(SYZI_SGSTB_HRK),'Null',toString(SYZI_SGSTB_HRK)),",
                        "          syzi_sgstb_oy=iif(isNull(SYZI_SGSTB_OY),'Null',toString(SYZI_SGSTB_OY)),",
                        "          syzi_sgstb_fnht=iif(isNull(SYZI_SGSTB_FNHT),'Null',toString(SYZI_SGSTB_FNHT)),",
                        "          syzi_sgstb_gsknsk=iif(isNull(SYZI_SGSTB_GSKNSK),'Null',toString(SYZI_SGSTB_GSKNSK)),",
                        "          syzi_sv_gskk_ss=iif(isNull(SYZI_SV_GSKK_SS),'Null',toString(SYZI_SV_GSKK_SS)),",
                        "          syzi_dk_web=iif(isNull(SYZI_DK_WEB),'Null',toString(SYZI_DK_WEB)))) ~> contractscoreColumn",
                        "contractscoreColumn sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     partitionFileNames:[($filename)],",
                        "     mapColumn(",
                        "          user_id,",
                        "          contract,",
                        "          score",
                        "     ),",
                        "     partitionBy('hash', 1)) ~> dataexportblob"
                    ]
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pi_Send_karte_contract_score_info')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "日次お客さま、電力ＣＩＳ契約情報、顧客ＤＮＡよりデータを取得し、MTGIDをハッシュ化してKARTE S3に送信する",
                "activities": [
                    {
                        "name": "at_To_BLOB_KARTE",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [
                            {
                                "activity": "at_Insert_karte_contract_score_hashed",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "df_json_data_blob_only",
                                "type": "DataFlowReference",
                                "parameters": {
                                    "filename": {
                                        "value": "'@{concat('TGContractScore_', convertFromUtc(utcNow(), 'Tokyo Standard Time', 'yyyyMMdd'), '.json')}'",
                                        "type": "Expression"
                                    }
                                },
                                "datasetParameters": {
                                    "dataimport": {},
                                    "dataexportblob": {
                                        "directory": "TGContractScore",
                                        "filename": {
                                            "value": "@concat('TGContractScore_', convertFromUtc(utcNow(), 'Tokyo Standard Time', 'yyyyMMdd'), '.json')",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            },
                            "staging": {},
                            "integrationRuntime": {
                                "referenceName": "omni-sharing01-d-jpe",
                                "type": "IntegrationRuntimeReference"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "at_Insert_karte_contract_score_hashed",
                        "description": "mTGIDベースの利用サービスを軸に、日次お客さま情報の契約種別、電力ＣＩＳ契約情報の料金メニュー、顧客DNA情報を取得し、TG契約情報を作成する",
                        "type": "Script",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "linkedServiceName": {
                            "referenceName": "li_dam_dwh",
                            "type": "LinkedServiceReference"
                        },
                        "typeProperties": {
                            "scripts": [
                                {
                                    "type": "NonQuery",
                                    "text": "--処理(f)\n--KARTE連携用契約有無tempを作成\nTRUNCATE TABLE [omni].[omni_ods_cloak_trn_karte_contract_temp];\n\nINSERT INTO [omni].[omni_ods_cloak_trn_karte_contract_temp]\nSELECT\n     [MTGID]\n    ,MAX(CASE WHEN SERVICE_TYPE = '001' THEN '1'\n            ELSE '0'\n     END) AS INTERNAL_AREA_GAS                           -- 域内ガス契約フラグ\n    ,MAX(CASE WHEN SERVICE_TYPE = '010' THEN '1'\n            ELSE '0'\n     END) AS EXTERNAL_AREA_GAS                           -- 域外ガス契約フラグ\n    ,MAX(CASE WHEN SERVICE_TYPE = '006' THEN '1'\n            ELSE '0'\n     END) AS POWER                                       -- 電気契約フラグ\nFROM [omni].[omni_ods_cloak_trn_karte_usageservice_mtgid]        -- KARTE連携用利用サービス\nGROUP BY [MTGID]\n;\n\n\n--処理(g)\n--KARTE連携用ガス契約種別tempを作成\nTRUNCATE TABLE [omni].[omni_ods_gascstmr_trn_karte_gas_contract_temp];\n\nINSERT INTO [omni].[omni_ods_gascstmr_trn_karte_gas_contract_temp]\nSELECT\n     key_mtgid.[MTGID]\n    ,key_mtgid.[KEY_3X]\n    ,key_mtgid.[KEY_4X]\n    ,gaskiy.[KIY_SHBT]\n    ,gaskiy.[RKKI_STT_YMD]\nFROM [omni].[omni_ods_cloak_trn_karte_usageservice_mtgid] key_mtgid        -- KARTE連携用利用サービス\nINNER JOIN [omni].[omni_odm_gascstmr_trn_gaskiy] gaskiy                    -- 日次お客さま情報\n      ON key_mtgid.[KEY_3X]  = CONVERT(varchar,gaskiy.[SYO_KYO_TRNO])\n      AND key_mtgid.[KEY_4X]  = CONVERT(varchar,gaskiy.[SVKY_NO])\n      AND key_mtgid.[SERVICE_TYPE] = '001'\n;\n\n\n--処理(h)\n--KARTE連携用電力契約種別tempを作成\nTRUNCATE TABLE [omni].[omni_ods_epcis_trn_karte_el_contract_temp];\n\nINSERT INTO [omni].[omni_ods_epcis_trn_karte_el_contract_temp]\nSELECT\n     usv.[MTGID]\n    ,usv.[SA_ID]\n    ,epcis.[RS_CD]\n    ,epcis.[GAS_START_DT]\nFROM [omni].[omni_ods_cloak_trn_karte_usageservice_mtgid] usv        -- KARTE連携用利用サービス\nINNER JOIN [omni].[omni_ods_epcis_trn_contract] epcis                -- 電力ＣＩＳ契約情報\n      ON usv.[SA_ID] = epcis.[SA_ID]\n      AND epcis.CONTRACT_STATUS  = '20'\n      AND usv.[SERVICE_TYPE] = '006'\n;\n\n\n--処理(i)\n--KARTE連携用スコア情報tempを作成\nTRUNCATE TABLE [omni].[omni_ods_marketing_trn_karte_score_temp];\n\nINSERT INTO [omni].[omni_ods_marketing_trn_karte_score_temp]\nSELECT\n     usv.[MTGID]\n    ,usv.[KEY_4X]\n    --,dna.[PV_SITI_SCR]                            -- PV推定スコア         削除 2024/12\n    ,dna.[PV_SCORE_POWER]                         -- PVスコア_電力          追加 2024/12\n    ,dna.[PV_SCORE_RANK_POWER]                    -- PVスコアランク_電力    追加 2024/12\n    ,dna.[PV_SCORE_GAS]                           -- PVスコア_ガス          追加 2024/12\n    ,dna.[ESTIMATED_PV_HOLDINGS_FLAG_GAS]         -- 推定PV保有フラグ_ガス  追加 2024/12\n    ,dna.[DG_STN_AGE_0_29]                        -- デモグラフィック情報_世帯主年代_0-29歳\n    ,dna.[DG_STN_AGE_30_39]                       -- デモグラフィック情報_世帯主年代_30-39歳\n    ,dna.[DG_STN_AGE_40_49]                       -- デモグラフィック情報_世帯主年代_40-49歳\n    ,dna.[DG_STN_AGE_50_59]                       -- デモグラフィック情報_世帯主年代_50-59歳\n    ,dna.[DG_STN_AGE_60_69]                       -- デモグラフィック情報_世帯主年代_60-69歳\n    ,dna.[DG_STN_AGE_70_99]                       -- デモグラフィック情報_世帯主年代_70-99歳\n    ,dna.[DG_SITI_ST_NUM]\t                      -- デモグラフィック情報_推定世帯人数　追加 2024/12\n    ,dna.[DG_STNS_4MLON_LESS]                     -- デモグラフィック情報_世帯年収_400万円未満\n    ,dna.[DG_STNS_10MLON_OVER]                    -- デモグラフィック情報_世帯年収_1000万円以上\n    ,dna.[TNKYSK_2MONTH]                          -- 転居予測_2か月以内     追加 2024/12\n    ,dna.[TNKYSK_1YEAR]                           -- 転居予測_1年以内\n    ,dna.[SYZI_GS_DTRKSCR_MONTH03]                -- 商材_ガス脱落スコア_直近3ヶ月\n    ,dna.[SYZI_GS_DTRKSCR_YEAR01]                 -- 商材_ガス脱落スコア_直近1年\n    ,dna.[SYZI_DK_DTRKSCR_MONTH03]                -- 商材_電気脱落スコア_直近3ヶ月\n    ,dna.[SYZI_DK_DTRKSCR_YEAR01]                 -- 商材_電気脱落スコア_直近1年\n    ,dna.[SYZI_SGSTB_TBLKNR]                      -- 商材_総合設備_テーブルコンロ\n    ,dna.[SYZI_SGSTB_BLTINKNR]                    -- 商材_総合設備_ビルトインコンロ\n    ,dna.[SYZI_SGSTB_TES]                         -- 商材_総合設備_TES\n    ,dna.[SYZI_SGSTB_HRK]                         -- 商材_総合設備_風呂給\n    ,dna.[SYZI_SGSTB_OY]                          -- 商材_総合設備_大湯\n    ,dna.[SYZI_SGSTB_FNHT]                        -- 商材_総合設備_ファンヒーター\n    ,dna.[SYZI_SGSTB_GSKNSK]                      -- 商材_総合設備_ガス式衣類乾燥機\n    ,dna.[SYZI_SV_GSKK_SS]                        -- 商材_サービス_ガス機器SS\n    ,dna.[SYZI_DK_WEB]                            -- 商材_電気WEB\n    ,usv.[TRANSFER_YMD]                                             --サービス契約異動日\nFROM [omni].[omni_ods_cloak_trn_karte_usageservice_mtgid] usv       -- KARTE連携用利用サービス\nINNER JOIN [omni].[omni_ods_marketing_trn_client_dna] dna                -- 顧客DNA  --<<<test用\n      ON usv.[KEY_4X]=dna.[LIV0EU_4X]\n;\n\n\n--処理(j)\n--KARTE連携用契約・スコア情報を作成\nTRUNCATE TABLE [omni].[omni_ods_marketing_trn_karte_contract_score_info];\n\nINSERT INTO [omni].[omni_ods_marketing_trn_karte_contract_score_info]\nSELECT\n     cntr.[MTGID]\n\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0'\n            ELSE cntr.INTERNAL_AREA_GAS\n     END AS INTERNAL_AREA_GAS                             -- 域内ガス契約フラグ\n    ,gaskiy.KIY_SHBT AS INTERNAL_AREA_GAS_MENU            -- 域内ガス契約種別\n    ,cntr.EXTERNAL_AREA_GAS                               -- 域外ガス契約フラグ\n    ,NULL AS EXTERNAL_AREA_GAS_MENU                       -- 域外ガス契約種別\n    ,CASE WHEN epcis.RS_CD IS NULL THEN '0'\n            ELSE cntr.POWER\n     END AS POWER                                         -- 電気契約フラグ\n    ,epcis.RS_CD AS POWER_MENU                            -- 電気契約種別 \n\n    --,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[PV_SITI_SCR] END AS PV_SITI_SCR                     -- PV推定スコア    削除 2024/12\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0'\n          ELSE dna.[PV_SCORE_POWER] END AS PV_SCORE_POWER                                          -- PVスコア_電力          追加 2024/12\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN ''\n          ELSE dna.[PV_SCORE_RANK_POWER] END AS PV_SCORE_RANK_POWER                                -- PVスコアランク_電力    追加 2024/12\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0'\n          ELSE dna.[PV_SCORE_GAS] END AS PV_SCORE_GAS                                              -- PVスコア_ガス          追加 2024/12\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0'\n          ELSE dna.[ESTIMATED_PV_HOLDINGS_FLAG_GAS] END AS ESTIMATED_PV_HOLDINGS_FLAG_GAS          -- 推定PV保有フラグ_ガス  追加 2024/12\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[DG_STN_AGE_0_29] END AS DG_STN_AGE_0_29             -- デモグラフィック情報_世帯主年代_0-29歳\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[DG_STN_AGE_30_39] END AS DG_STN_AGE_30_39           -- デモグラフィック情報_世帯主年代_30-39歳\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[DG_STN_AGE_40_49] END AS DG_STN_AGE_40_49           -- デモグラフィック情報_世帯主年代_40-49歳\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[DG_STN_AGE_50_59] END AS DG_STN_AGE_50_59           -- デモグラフィック情報_世帯主年代_50-59歳\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[DG_STN_AGE_60_69] END AS DG_STN_AGE_60_69           -- デモグラフィック情報_世帯主年代_60-69歳\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[DG_STN_AGE_70_99] END AS DG_STN_AGE_70_99           -- デモグラフィック情報_世帯主年代_70-99歳\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN ''\n          ELSE dna.[DG_SITI_ST_NUM] END AS DG_SITI_ST_NUM                                          -- デモグラフィック情報_推定世帯人数　追加 2024/12\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[DG_STNS_4MLON_LESS] END AS DG_STNS_4MLON_LESS       -- デモグラフィック情報_世帯年収_400万円未満\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[DG_STNS_10MLON_OVER] END AS DG_STNS_10MLON_OVER     -- デモグラフィック情報_世帯年収_1000万円以上\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0'\n          ELSE dna.[TNKYSK_2MONTH] END AS TNKYSK_2MON                                              -- 転居予測_2か月以内    追加 2024/12\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[TNKYSK_1YEAR] END AS TNKYSK_1YEAR                   -- 転居予測_1年以内\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[SYZI_GS_DTRKSCR_MONTH03] END AS SYZI_GS_DTRKSCR_MONTH03   -- 商材_ガス脱落スコア_直近3ヶ月\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[SYZI_GS_DTRKSCR_YEAR01] END AS SYZI_GS_DTRKSCR_YEAR01     -- 商材_ガス脱落スコア_直近1年\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[SYZI_DK_DTRKSCR_MONTH03] END AS SYZI_DK_DTRKSCR_MONTH03   -- 商材_電気脱落スコア_直近3ヶ月\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[SYZI_DK_DTRKSCR_YEAR01] END AS SYZI_DK_DTRKSCR_YEAR01     -- 商材_電気脱落スコア_直近1年\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[SYZI_SGSTB_TBLKNR] END AS SYZI_SGSTB_TBLKNR         -- 商材_総合設備_テーブルコンロ\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[SYZI_SGSTB_BLTINKNR] END AS SYZI_SGSTB_BLTINKNR     -- 商材_総合設備_ビルトインコンロ\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[SYZI_SGSTB_TES] END AS SYZI_SGSTB_TES               -- 商材_総合設備_TES\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[SYZI_SGSTB_HRK] END AS SYZI_SGSTB_HRK               -- 商材_総合設備_風呂給\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[SYZI_SGSTB_OY] END AS SYZI_SGSTB_OY                 -- 商材_総合設備_大湯\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[SYZI_SGSTB_FNHT] END AS SYZI_SGSTB_FNHT             -- 商材_総合設備_ファンヒーター\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[SYZI_SGSTB_GSKNSK] END AS SYZI_SGSTB_GSKNSK         -- 商材_総合設備_ガス式衣類乾燥機\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[SYZI_SV_GSKK_SS] END AS SYZI_SV_GSKK_SS             -- 商材_サービス_ガス機器SS\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[SYZI_DK_WEB] END AS SYZI_DK_WEB                     -- 商材_電気WEB\nFROM [omni].[omni_ods_cloak_trn_karte_contract_temp] cntr                -- KARTE連携用契約有無temp\nLEFT JOIN ( SELECT *,\n                   row_number() over (PARTITION BY [MTGID] ORDER BY[RKKI_STT_YMD] DESC) AS desc_date\n            FROM [omni].[omni_ods_gascstmr_trn_karte_gas_contract_temp]\n          )gaskiy  -- KARTE連携用ガス契約種別temp\n      ON cntr.[MTGID] = gaskiy.[MTGID] \n      AND gaskiy.desc_date = 1 \nLEFT JOIN ( SELECT *,\n                   row_number() over (PARTITION BY [MTGID] ORDER BY [GAS_START_DT] DESC) AS desc_date\n            FROM [omni].[omni_ods_epcis_trn_karte_el_contract_temp]\n           ) epcis       -- KARTE連携用電力契約種別temp\n      ON cntr.[MTGID] = epcis.[MTGID]\n      AND epcis.desc_date = 1 \nLEFT JOIN ( SELECT *,\n                   row_number() over (PARTITION BY [MTGID] ORDER BY [TRANSFER_YMD] DESC) AS desc_date\n            FROM [omni].[omni_ods_marketing_trn_karte_score_temp]\n           )dna           -- KARTE連携用スコア情報temp\n      ON cntr.[MTGID] = dna.[MTGID] \n      AND dna.desc_date = 1 \n;\n\n\n--処理(k)\n--ハッシュ済KARTE連携用契約・スコア情報を作成\nTRUNCATE TABLE [omni].[omni_ods_marketing_trn_karte_contract_score_hashed];\n\nINSERT INTO [omni].[omni_ods_marketing_trn_karte_contract_score_hashed]\nSELECT\n     karte_mtgid.[HASHEDMTGID] AS HASHED_MTGID\n    ,score_info.[INTERNAL_AREA_GAS]\n    ,score_info.[INTERNAL_AREA_GAS_MENU]\n    ,score_info.[EXTERNAL_AREA_GAS]\n    ,score_info.[EXTERNAL_AREA_GAS_MENU]\n    ,score_info.[POWER]\n    ,score_info.[POWER_MENU]\n    --,score_info.[PV_SITI_SCR]\t                       -- PV推定スコア         削除 2024/12\n    ,score_info.[PV_SCORE_POWER]                       -- PVスコア_電力          追加 2024/12\n    ,score_info.[PV_SCORE_RANK_POWER]                  -- PVスコアランク_電力    追加 2024/12\n    ,score_info.[PV_SCORE_GAS]                         -- PVスコア_ガス          追加 2024/12\n    ,score_info.[ESTIMATED_PV_HOLDINGS_FLAG_GAS]       -- 推定PV保有フラグ_ガス  追加 2024/12\n    ,score_info.[DG_STN_AGE_0_29]\n    ,score_info.[DG_STN_AGE_30_39]\n    ,score_info.[DG_STN_AGE_40_49]\n    ,score_info.[DG_STN_AGE_50_59]\n    ,score_info.[DG_STN_AGE_60_69]\n    ,score_info.[DG_STN_AGE_70_99]\n    ,score_info.[DG_SITI_ST_NUM]\t                   -- デモグラフィック情報_推定世帯人数　追加 2024/12\n    ,score_info.[DG_STNS_4MLON_LESS]\n    ,score_info.[DG_STNS_10MLON_OVER]\n    ,score_info.[TNKYSK_2MONTH]                        -- 転居予測_2か月以内     追加 2024/12\n    ,score_info.[TNKYSK_1YEAR]\n    ,score_info.[SYZI_GS_DTRKSCR_MONTH03]\n    ,score_info.[SYZI_GS_DTRKSCR_YEAR01]\n    ,score_info.[SYZI_DK_DTRKSCR_MONTH03]\n    ,score_info.[SYZI_DK_DTRKSCR_YEAR01]\n    ,score_info.[SYZI_SGSTB_TBLKNR]\n    ,score_info.[SYZI_SGSTB_BLTINKNR]\n    ,score_info.[SYZI_SGSTB_TES]\n    ,score_info.[SYZI_SGSTB_HRK]\n    ,score_info.[SYZI_SGSTB_OY]\n    ,score_info.[SYZI_SGSTB_FNHT]\n    ,score_info.[SYZI_SGSTB_GSKNSK]\n    ,score_info.[SYZI_SV_GSKK_SS]\n    ,score_info.[SYZI_DK_WEB]\nFROM [omni].[omni_ods_marketing_trn_karte_contract_score_info] score_info        -- KARTE連携用契約・スコア情報\nINNER JOIN [omni].[omni_ods_mytginfo_trn_karte_mtgid] karte_mtgid               -- ハッシュ化マッピングテーブル\n      ON score_info.[MTGID]=karte_mtgid.[MTGID] \n;\n"
                                }
                            ],
                            "scriptBlockExecutionTimeout": "02:00:00"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "folder": {
                    "name": "TGContractScore"
                },
                "annotations": [],
                "lastPublishTime": "2024-12-25T00:30:54Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/df_json_data_blob_only')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/pi_Send_karte_contract_score_info_test')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "検証用",
                "activities": [
                    {
                        "name": "at_To_BLOB_KARTE",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [
                            {
                                "activity": "at_Insert_karte_contract_score_hashed",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "df_json_data_blob_only_test",
                                "type": "DataFlowReference",
                                "parameters": {
                                    "filename": {
                                        "value": "'@{concat('TGContractScore_', convertFromUtc(utcNow(), 'Tokyo Standard Time', 'yyyyMMdd'), '.json')}'",
                                        "type": "Expression"
                                    }
                                },
                                "datasetParameters": {
                                    "dataimport": {},
                                    "dataexportblob": {
                                        "directory": "TGContractScore",
                                        "filename": {
                                            "value": "@concat('TGContractScore_', convertFromUtc(utcNow(), 'Tokyo Standard Time', 'yyyyMMdd'), '.json')",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            },
                            "staging": {},
                            "integrationRuntime": {
                                "referenceName": "omni-sharing01-d-jpe",
                                "type": "IntegrationRuntimeReference"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "at_Insert_karte_contract_score_hashed",
                        "description": "mTGIDベースの利用サービスを軸に、日次お客さま情報の契約種別、電力ＣＩＳ契約情報の料金メニュー、顧客DNA情報を取得し、TG契約情報を作成する",
                        "type": "Script",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "linkedServiceName": {
                            "referenceName": "li_dam_dwh",
                            "type": "LinkedServiceReference"
                        },
                        "typeProperties": {
                            "scripts": [
                                {
                                    "type": "NonQuery",
                                    "text": "--処理(f)\r\n--KARTE連携用契約有無tempを作成\r\nTRUNCATE TABLE [omni].[omni_ods_cloak_trn_karte_contract_temp];\r\n\r\nINSERT INTO [omni].[omni_ods_cloak_trn_karte_contract_temp]\r\nSELECT\r\n     [MTGID]\r\n    ,MAX(CASE WHEN SERVICE_TYPE = '001' THEN '1'\r\n            ELSE '0'\r\n     END) AS INTERNAL_AREA_GAS                           -- 域内ガス契約フラグ\r\n    ,MAX(CASE WHEN SERVICE_TYPE = '010' THEN '1'\r\n            ELSE '0'\r\n     END) AS EXTERNAL_AREA_GAS                           -- 域外ガス契約フラグ\r\n    ,MAX(CASE WHEN SERVICE_TYPE = '006' THEN '1'\r\n            ELSE '0'\r\n     END) AS POWER                                       -- 電気契約フラグ\r\nFROM [omni].[omni_ods_cloak_trn_karte_usageservice_mtgid]        -- KARTE連携用利用サービス\r\nGROUP BY [MTGID]\r\n\r\n\r\n--処理(g)\r\n--KARTE連携用ガス契約種別tempを作成\r\nTRUNCATE TABLE [omni].[omni_ods_gascstmr_trn_karte_gas_contract_temp];\r\n\r\nINSERT INTO [omni].[omni_ods_gascstmr_trn_karte_gas_contract_temp]\r\nSELECT\r\n     key_mtgid.[MTGID]\r\n    ,key_mtgid.[KEY_3X]\r\n    ,key_mtgid.[KEY_4X]\r\n    ,gaskiy.[KIY_SHBT]\r\n    ,gaskiy.[RKKI_STT_YMD]\r\nFROM [omni].[omni_ods_cloak_trn_karte_usageservice_mtgid] key_mtgid        -- KARTE連携用利用サービス\r\nINNER JOIN [omni].[omni_odm_gascstmr_trn_gaskiy] gaskiy                    -- 日次お客さま情報\r\n      ON key_mtgid.[KEY_3X]  = CONVERT(varchar,gaskiy.[SYO_KYO_TRNO])\r\n      AND key_mtgid.[KEY_4X]  = CONVERT(varchar,gaskiy.[SVKY_NO])\r\n      AND key_mtgid.[SERVICE_TYPE] = '001'\r\n\r\n--処理(h)\r\n--KARTE連携用電力契約種別tempを作成\r\nTRUNCATE TABLE [omni].[omni_ods_epcis_trn_karte_el_contract_temp];\r\n\r\nINSERT INTO [omni].[omni_ods_epcis_trn_karte_el_contract_temp]\r\nSELECT\r\n     usv.[MTGID]\r\n    ,usv.[SA_ID]\r\n    ,epcis.[RS_CD]\r\n    ,epcis.[GAS_START_DT]\r\nFROM [omni].[omni_ods_cloak_trn_karte_usageservice_mtgid] usv        -- KARTE連携用利用サービス\r\nINNER JOIN [omni].[omni_ods_epcis_trn_contract] epcis                -- 電力ＣＩＳ契約情報\r\n      ON usv.[SA_ID] = CONVERT(varchar,epcis.[SA_ID] )\r\n      AND epcis.CONTRACT_STATUS  = '20'\r\n      AND usv.[SERVICE_TYPE] = '006'\r\n\r\n\r\n--処理(I)\r\n--KARTE連携用スコア情報tempを作成\r\nTRUNCATE TABLE [omni].[omni_ods_marketing_trn_karte_score_temp];\r\n\r\nINSERT INTO [omni].[omni_ods_marketing_trn_karte_score_temp]\r\nSELECT\r\n     usv.[MTGID]\r\n    ,usv.[KEY_4X]\r\n    ,dna.[PV_SITI_SCR]                            -- PV推定スコア\r\n    ,dna.[DG_STN_AGE_0_29]                        -- デモグラフィック情報_世帯主年代_0-29歳\r\n    ,dna.[DG_STN_AGE_30_39]                       -- デモグラフィック情報_世帯主年代_30-39歳\r\n    ,dna.[DG_STN_AGE_40_49]                       -- デモグラフィック情報_世帯主年代_40-49歳\r\n    ,dna.[DG_STN_AGE_50_59]                       -- デモグラフィック情報_世帯主年代_50-59歳\r\n    ,dna.[DG_STN_AGE_60_69]                       -- デモグラフィック情報_世帯主年代_60-69歳\r\n    ,dna.[DG_STN_AGE_70_99]                       -- デモグラフィック情報_世帯主年代_70-99歳\r\n    ,dna.[DG_STNS_4MLON_LESS]                     -- デモグラフィック情報_世帯年収_400万円未満\r\n    ,dna.[DG_STNS_10MLON_OVER]                    -- デモグラフィック情報_世帯年収_1000万円以上\r\n    ,dna.[TNKYSK_1YEAR]                           -- 転居予測_転居予測_1年以内\r\n    ,dna.[SYZI_GS_DTRKSCR_MONTH03]                -- 商材_ガス脱落スコア_直近3ヶ月\r\n    ,dna.[SYZI_GS_DTRKSCR_YEAR01]                 -- 商材_ガス脱落スコア_直近1年\r\n    ,dna.[SYZI_DK_DTRKSCR_MONTH03]                -- 商材_電気脱落スコア_直近3ヶ月\r\n    ,dna.[SYZI_DK_DTRKSCR_YEAR01]                 -- 商材_電気脱落スコア_直近1年\r\n    ,dna.[SYZI_SGSTB_TBLKNR]                      -- 商材_総合設備_テーブルコンロ\r\n    ,dna.[SYZI_SGSTB_BLTINKNR]                    -- 商材_総合設備_ビルトインコンロ\r\n    ,dna.[SYZI_SGSTB_TES]                         -- 商材_総合設備_TES\r\n    ,dna.[SYZI_SGSTB_HRK]                         -- 商材_総合設備_風呂給\r\n    ,dna.[SYZI_SGSTB_OY]                          -- 商材_総合設備_大湯\r\n    ,dna.[SYZI_SGSTB_FNHT]                        -- 商材_総合設備_ファンヒーター\r\n    ,dna.[SYZI_SGSTB_GSKNSK]                      -- 商材_総合設備_ガス式衣類乾燥機\r\n    ,dna.[SYZI_SV_GSKK_SS]                        -- 商材_サービス_ガス機器SS\r\n    ,dna.[SYZI_DK_WEB]                            -- 商材_電気WEB\r\n    ,usv.[TRANSFER_YMD]                                             --サービス契約異動日\r\nFROM [omni].[omni_ods_cloak_trn_karte_usageservice_mtgid] usv       -- KARTE連携用利用サービス\r\nINNER JOIN [omni].[omni_ods_marketing_trn_client_dna] dna                -- 顧客DNA\r\n      ON usv.[KEY_4X]=dna.[LIV0EU_4X]  \r\n\r\n--処理(J)\r\n--KARTE連携用契約・スコア情報を作成\r\nTRUNCATE TABLE [omni].[omni_ods_marketing_trn_karte_contract_score_info];\r\n\r\nINSERT INTO [omni].[omni_ods_marketing_trn_karte_contract_score_info]\r\nSELECT\r\n     cntr.[MTGID]\r\n\r\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0'\r\n            ELSE cntr.INTERNAL_AREA_GAS\r\n     END AS INTERNAL_AREA_GAS                             -- 域内ガス契約フラグ\r\n    ,gaskiy.KIY_SHBT AS INTERNAL_AREA_GAS_MENU            -- 域内ガス契約種別\r\n    ,cntr.EXTERNAL_AREA_GAS                               -- 域外ガス契約フラグ\r\n    ,NULL AS EXTERNAL_AREA_GAS_MENU                       -- 域外ガス契約種別\r\n    ,CASE WHEN epcis.RS_CD IS NULL THEN '0'\r\n            ELSE cntr.POWER\r\n     END AS POWER                                         -- 電気契約フラグ\r\n    ,epcis.RS_CD AS POWER_MENU                            -- 電気契約種別 \r\n\r\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[PV_SITI_SCR] END AS PV_SITI_SCR                     -- PV推定スコア\r\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[DG_STN_AGE_0_29] END AS DG_STN_AGE_0_29             -- デモグラフィック情報_世帯主年代_0-29歳\r\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[DG_STN_AGE_30_39] END AS DG_STN_AGE_30_39           -- デモグラフィック情報_世帯主年代_30-39歳\r\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[DG_STN_AGE_40_49] END AS DG_STN_AGE_40_49           -- デモグラフィック情報_世帯主年代_40-49歳\r\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[DG_STN_AGE_50_59] END AS DG_STN_AGE_50_59           -- デモグラフィック情報_世帯主年代_50-59歳\r\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[DG_STN_AGE_60_69] END AS DG_STN_AGE_60_69           -- デモグラフィック情報_世帯主年代_60-69歳\r\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[DG_STN_AGE_70_99] END AS DG_STN_AGE_70_99           -- デモグラフィック情報_世帯主年代_70-99歳\r\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[DG_STNS_4MLON_LESS] END AS DG_STNS_4MLON_LESS       -- デモグラフィック情報_世帯年収_400万円未満\r\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[DG_STNS_10MLON_OVER] END AS DG_STNS_10MLON_OVER     -- デモグラフィック情報_世帯年収_1000万円以上\r\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[TNKYSK_1YEAR] END AS TNKYSK_1YEAR                   -- 転居予測_転居予測_1年以内\r\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[SYZI_GS_DTRKSCR_MONTH03] END AS SYZI_GS_DTRKSCR_MONTH03   -- 商材_ガス脱落スコア_直近3ヶ月\r\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[SYZI_GS_DTRKSCR_YEAR01] END AS SYZI_GS_DTRKSCR_YEAR01     -- 商材_ガス脱落スコア_直近1年\r\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[SYZI_DK_DTRKSCR_MONTH03] END AS SYZI_DK_DTRKSCR_MONTH03   -- 商材_電気脱落スコア_直近3ヶ月\r\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[SYZI_DK_DTRKSCR_YEAR01] END AS SYZI_DK_DTRKSCR_YEAR01     -- 商材_電気脱落スコア_直近1年\r\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[SYZI_SGSTB_TBLKNR] END AS SYZI_SGSTB_TBLKNR         -- 商材_総合設備_テーブルコンロ\r\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[SYZI_SGSTB_BLTINKNR] END AS SYZI_SGSTB_BLTINKNR     -- 商材_総合設備_ビルトインコンロ\r\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[SYZI_SGSTB_TES] END AS SYZI_SGSTB_TES               -- 商材_総合設備_TES\r\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[SYZI_SGSTB_HRK] END AS SYZI_SGSTB_HRK               -- 商材_総合設備_風呂給\r\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[SYZI_SGSTB_OY] END AS SYZI_SGSTB_OY                 -- 商材_総合設備_大湯\r\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[SYZI_SGSTB_FNHT] END AS SYZI_SGSTB_FNHT             -- 商材_総合設備_ファンヒーター\r\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[SYZI_SGSTB_GSKNSK] END AS SYZI_SGSTB_GSKNSK         -- 商材_総合設備_ガス式衣類乾燥機\r\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[SYZI_SV_GSKK_SS] END AS SYZI_SV_GSKK_SS             -- 商材_サービス_ガス機器SS\r\n    ,CASE WHEN gaskiy.KIY_SHBT IS NULL THEN '0' ELSE dna.[SYZI_DK_WEB] END AS SYZI_DK_WEB                     -- 商材_電気WEB\r\nFROM [omni].[omni_ods_cloak_trn_karte_contract_temp] cntr                -- KARTE連携用契約有無temp\r\nLEFT JOIN ( SELECT *,\r\n                   row_number() over (PARTITION BY [MTGID] ORDER BY[RKKI_STT_YMD] DESC) AS desc_date\r\n            FROM [omni].[omni_ods_gascstmr_trn_karte_gas_contract_temp]\r\n          )gaskiy  -- KARTE連携用ガス契約種別temp\r\n      ON cntr.[MTGID] = gaskiy.[MTGID] \r\n      AND gaskiy.desc_date = 1 \r\nLEFT JOIN ( SELECT *,\r\n                   row_number() over (PARTITION BY [MTGID] ORDER BY [GAS_START_DT] DESC) AS desc_date\r\n            FROM [omni].[omni_ods_epcis_trn_karte_el_contract_temp]\r\n           ) epcis       -- KARTE連携用電力契約種別temp\r\n      ON cntr.[MTGID] = epcis.[MTGID]\r\n      AND epcis.desc_date = 1 \r\nLEFT JOIN ( SELECT *,\r\n                   row_number() over (PARTITION BY [MTGID] ORDER BY [TRANSFER_YMD] DESC) AS desc_date\r\n            FROM [omni].[omni_ods_marketing_trn_karte_score_temp]\r\n           )dna           -- KARTE連携用スコア情報temp\r\n      ON cntr.[MTGID] = dna.[MTGID] \r\n      AND dna.desc_date = 1 \r\n\r\n\r\n\r\n--処理(K)\r\n--ハッシュ済KARTE連携用契約・スコア情報を作成\r\nTRUNCATE TABLE [omni].[omni_ods_marketing_trn_karte_contract_score_hashed];\r\n\r\nINSERT INTO [omni].[omni_ods_marketing_trn_karte_contract_score_hashed]\r\nSELECT\r\n     karte_mtgid.[HASHEDMTGID] AS HASHED_MTGID\r\n    ,score_info.[INTERNAL_AREA_GAS]\r\n    ,score_info.[INTERNAL_AREA_GAS_MENU]\r\n    ,score_info.[EXTERNAL_AREA_GAS]\r\n    ,score_info.[EXTERNAL_AREA_GAS_MENU]\r\n    ,score_info.[POWER]\r\n    ,score_info.[POWER_MENU]\r\n    ,score_info.[PV_SITI_SCR]\r\n    ,score_info.[DG_STN_AGE_0_29]\r\n    ,score_info.[DG_STN_AGE_30_39]\r\n    ,score_info.[DG_STN_AGE_40_49]\r\n    ,score_info.[DG_STN_AGE_50_59]\r\n    ,score_info.[DG_STN_AGE_60_69]\r\n    ,score_info.[DG_STN_AGE_70_99]\r\n    ,score_info.[DG_STNS_4MLON_LESS]\r\n    ,score_info.[DG_STNS_10MLON_OVER]\r\n    ,score_info.[TNKYSK_1YEAR]\r\n    ,score_info.[SYZI_GS_DTRKSCR_MONTH03]\r\n    ,score_info.[SYZI_GS_DTRKSCR_YEAR01]\r\n    ,score_info.[SYZI_DK_DTRKSCR_MONTH03]\r\n    ,score_info.[SYZI_DK_DTRKSCR_YEAR01]\r\n    ,score_info.[SYZI_SGSTB_TBLKNR]\r\n    ,score_info.[SYZI_SGSTB_BLTINKNR]\r\n    ,score_info.[SYZI_SGSTB_TES]\r\n    ,score_info.[SYZI_SGSTB_HRK]\r\n    ,score_info.[SYZI_SGSTB_OY]\r\n    ,score_info.[SYZI_SGSTB_FNHT]\r\n    ,score_info.[SYZI_SGSTB_GSKNSK]\r\n    ,score_info.[SYZI_SV_GSKK_SS]\r\n    ,score_info.[SYZI_DK_WEB]\r\nFROM [omni].[omni_ods_marketing_trn_karte_contract_score_info] score_info        -- KARTE連携用契約・スコア情報\r\nINNER JOIN [omni].[omni_ods_mytginfo_trn_karte_mtgid] karte_mtgid               -- ハッシュ化マッピングテーブル\r\n      ON score_info.[MTGID]=karte_mtgid.[MTGID] \r\n;\r\n\r\n\r\n\r\n\r\n"
                                }
                            ],
                            "scriptBlockExecutionTimeout": "02:00:00"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "folder": {
                    "name": "TGContractScore"
                },
                "annotations": [],
                "lastPublishTime": "2024-11-18T05:20:40Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/df_json_data_blob_only_test')]"
            ]
        }
    ]
}