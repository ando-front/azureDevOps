# =================================================================
# E2Eテスト用 Docker Compose ファイル (簡略版 - IR Simulator除外)
# プロキシ問題回避のため、必要最小限のサービスのみでテスト実行
# =================================================================

services:
  # E2Eテスト用データベース
  sqlserver-test:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver-e2e-simple
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong!Passw0rd123
      - MSSQL_PID=Express
      - MSSQL_COLLATION=Japanese_CI_AS
      # プロキシ無効化設定（完全無効化）
      - HTTP_PROXY=
      - HTTPS_PROXY=
      - NO_PROXY=*
      - http_proxy=
      - https_proxy=
      - no_proxy=*
    ports:
      - "1433:1433"
    volumes:
      - ./docker/sql/init:/docker-entrypoint-initdb.d
      - sqlserver_e2e_simple_data:/var/opt/mssql
    healthcheck:
      test: [ "CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd123' -Q 'SELECT 1' -C" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s
    command: >
      sh -c "
        echo 'Starting SQL Server with enhanced idempotent initialization...' &&
        /opt/mssql/bin/sqlservr &
        SERVER_PID=$$! &&
        echo 'Waiting for SQL Server to be ready...' &&
        sleep 60 &&
        echo 'Testing SQL Server connection...' &&
        for i in {1..30}; do
          if /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd123' -Q 'SELECT 1' -C >/dev/null 2>&1; then
            echo 'SQL Server is ready!' &&
            break
          fi
          echo 'Waiting for SQL Server... attempt' $$i &&
          sleep 5
        done &&
        echo 'Executing idempotent initialization scripts...' &&
        echo 'Step 1: Creating SynapseTestDB (Fixed)...' &&
        /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd123' -i /docker-entrypoint-initdb.d/00_create_synapse_db_fixed.sql -C -b &&
        echo 'Step 2: Initializing TGMATestDB (Fixed)...' &&
        /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd123' -i /docker-entrypoint-initdb.d/01_init_database_fixed.sql -C -b &&
        echo 'Step 3: Creating test tables...' &&
        /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd123' -i /docker-entrypoint-initdb.d/02_create_test_tables.sql -C -b &&
        echo 'Step 4: Inserting test data...' &&
        /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd123' -i /docker-entrypoint-initdb.d/03_insert_test_data.sql -C -b &&
        echo 'Database initialization completed successfully!' &&
        echo 'SQL Server is ready for connections' &&
        wait $$SERVER_PID
      "
    networks:
      - e2e-network

  # Azurite for Azure Storage emulation
  azurite-test:
    image: mcr.microsoft.com/azure-storage/azurite:latest
    container_name: azurite-e2e-simple
    environment:
      - AZURITE_ACCOUNTS=devstoreaccount1:Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==
      # プロキシ無効化設定（完全無効化）
      - HTTP_PROXY=
      - HTTPS_PROXY=
      - NO_PROXY=*
      - http_proxy=
      - https_proxy=
      - no_proxy=*
    ports:
      - "10000:10000" # Blob service
      - "10001:10001" # Queue service
      - "10002:10002" # Table service
    volumes:
      - azurite_e2e_simple_data:/data
    command: [ "azurite", "--blobHost", "0.0.0.0", "--queueHost", "0.0.0.0", "--tableHost", "0.0.0.0", "--location", "/data", "--debug", "/data/debug.log" ]
    networks:
      - e2e-network

  # E2Eテスト実行環境（既存イメージ使用 - ビルド不要）
  e2e-test-runner:
    image: adf-e2e-test:latest
    container_name: adf-e2e-test-runner-simple
    depends_on:
      sqlserver-test:
        condition: service_healthy
      azurite-test:
        condition: service_started
    environment:
      # データベース接続設定（タイムアウト拡張）
      - SQL_SERVER_HOST=sqlserver-test
      - SQL_SERVER_PORT=1433
      - SQL_SERVER_DATABASE=master
      - SQL_SERVER_USER=sa
      - SQL_SERVER_PASSWORD=YourStrong!Passw0rd123
      - SQL_SERVER_TIMEOUT=30
      - SQL_CONNECTION_TIMEOUT=30
      # Azure Storage設定（コンテナ間通信用）
      - AZURITE_CONNECTION_STRING=DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite-test:10000/devstoreaccount1;
      - AZURITE_BLOB_ENDPOINT=http://azurite-test:10000
      - AZURITE_QUEUE_ENDPOINT=http://azurite-test:10001
      - AZURITE_TABLE_ENDPOINT=http://azurite-test:10002
      # IRシミュレーター設定（無効化）
      - IR_SIMULATOR_URL=""
      # ADF関連設定
      - ADF_SUBSCRIPTION_ID=${ADF_SUBSCRIPTION_ID:-}
      - ADF_RESOURCE_GROUP=${ADF_RESOURCE_GROUP:-}
      - ADF_FACTORY_NAME=${ADF_FACTORY_NAME:-}
      - ADF_TENANT_ID=${ADF_TENANT_ID:-}
      - ADF_CLIENT_ID=${ADF_CLIENT_ID:-}
      - ADF_CLIENT_SECRET=${ADF_CLIENT_SECRET:-}
      # テスト実行設定
      - TEST_MODE=e2e
      - PYTEST_MARKERS=e2e
      - TEST_TIMEOUT=600
      - PYTEST_CURRENT_TEST=1
      - LOG_LEVEL=INFO
      # Python設定
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      # プロキシ無効化設定（完全無効化）
      - HTTP_PROXY=
      - HTTPS_PROXY=
      - NO_PROXY=*
      - http_proxy=
      - https_proxy=
      - no_proxy=*
    volumes:
      - ./tests:/app/tests:ro
      - ./src:/app/src:ro
      - ./input:/app/input:ro
      - ./output:/app/output
      - ./config:/app/config:ro
      - ./docker/test-runner/config:/app/docker_config:ro
      - e2e_test_results_simple:/app/test_results
    working_dir: /app
    networks:
      - e2e-network
    command: >
      sh -c "
        echo '⏳ 修正版E2Eテスト環境の準備を開始します（プロキシ問題対応）...' &&
        sleep 20 &&
        echo '🔍 データベース接続確認...' &&
        until python -c 'import pyodbc; pyodbc.connect(\"DRIVER={ODBC Driver 18 for SQL Server};SERVER=sqlserver-test,1433;DATABASE=master;UID=sa;PWD=YourStrong!Passw0rd123;TrustServerCertificate=yes;Encrypt=yes;\", timeout=30)'; do
          echo 'データベース接続待機中...' &&
          sleep 5
        done &&
        echo '✅ データベース接続成功！' &&
        echo '🔍 Azurite接続確認...' &&
        python -c 'import requests; print(requests.get(\"http://azurite-test:10000/devstoreaccount1\", timeout=10).status_code)' &&
        echo '✅ Azurite接続成功！' &&
        echo '🚀 改善版E2Eテストスイートを実行します...' &&
        echo '📁 テスト結果ディレクトリを作成...' &&
        mkdir -p /app/test_results &&
        echo '📊 フェーズ1: 基本接続テスト（修正版）...' &&
        python -m pytest /app/tests/e2e/test_basic_connections.py -v --tb=short --junitxml=/app/test_results/basic_connections_fixed.xml --timeout=600 &&
        echo '📊 フェーズ2: 最終統合テスト（修正版）...' &&
        python -m pytest /app/tests/e2e/test_final_integration.py -v --tb=short --junitxml=/app/test_results/final_integration_fixed.xml --timeout=600 || echo '最終統合テスト一部失敗' &&
        echo '🏆 フェーズ3: 包括的E2Eテストスイート（修正版・IR除外）...' &&
        python -m pytest /app/tests/e2e/ -k 'not ir_simulator and not integration_runtime' -v --tb=short --maxfail=5 --junitxml=/app/test_results/e2e_comprehensive_fixed.xml --html=/app/test_results/e2e_report_fixed.html --self-contained-html --timeout=600 || echo '包括的テスト完了（一部失敗の可能性）' &&
        echo '✅ 修正版E2Eテストスイート完了！' &&
        echo '📊 テスト結果サマリー:' &&
        find /app/test_results -name '*fixed*' -exec echo '修正版結果ファイル: {}' \\; &&
        echo '📈 テスト実行完了時刻:' $(date) &&
        echo '🎯 修正された問題: プロキシ設定、データベース接続タイムアウト' &&
        tail -20 /app/test_results/*.xml | head -100
      "

networks:
  e2e-network:
    driver: bridge

volumes:
  sqlserver_e2e_simple_data:
    driver: local
  azurite_e2e_simple_data:
    driver: local
  e2e_test_results_simple:
    driver: local
